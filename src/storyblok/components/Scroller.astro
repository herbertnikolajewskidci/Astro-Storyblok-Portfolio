---
const { blok } = Astro.props;
const listItems = blok.item.tbody.map((listItem) => listItem.body[0].value);
---

<section class="grid place-content-center py-5">
    <div
        class="scroller max-w-[600px] overflow-hidden mask-radial mask-shape-ellipse"
        data-speed=""
        data-direction=""
    >
        <ul
            class="tag-list scroller__inner m-0 ps-0 pe-0 list-none pt-6 pb-6 w-max-content flex gap-4 flex-wrap animate-scroll"
        >
            {
                listItems.map((listItem) => (
                    <li class="p-4 rounded-lg shadow-lg shadow-primary-900">
                        {listItem}
                    </li>
                ))
            }
        </ul>
    </div>
</section>

<script>
    const scrollers = document.querySelectorAll(".scroller");

    // If a user hasn't opted in for recuded motion, then we add the animation
    if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
        addAnimation();
    }

    function addAnimation() {
        scrollers.forEach((scroller) => {
            // add data-animated="true" to every `.scroller` on the page
            scroller.setAttribute("data-animated", "true");
            // Make an array from the elements within `.scroller-inner`
            const scrollerInner = scroller.querySelector(".scroller__inner");
            const scrollerContent = Array.from(scrollerInner.children);

            const dataSpeed = scroller.getAttribute("data-speed");
            const dataDirection = scroller.getAttribute("data-direction");

            if (dataDirection && !dataSpeed) {
                scrollerInner.classList.remove("animate-scroll");
                if (dataDirection === "right") {
                    scrollerInner.classList.add("animate-scroll-right");
                } else if (dataDirection === "left") {
                    scrollerInner.classList.add("animate-scroll-left");
                }
            } else if (!dataDirection && dataSpeed) {
                scrollerInner.classList.remove("animate-scroll");
                if (dataSpeed === "slow") {
                    scrollerInner.classList.add("animate-scroll-slow");
                } else if (dataSpeed === "fast") {
                    scrollerInner.classList.add("animate-scroll-fast");
                }
            } else if (dataDirection && dataSpeed) {
                scrollerInner.classList.remove("animate-scroll");
                if (dataDirection === "right" && dataSpeed === "slow") {
                    scrollerInner.classList.add("animate-scroll-slow-right");
                } else if (dataDirection === "right" && dataSpeed === "fast") {
                    scrollerInner.classList.add("animate-scroll-fast-right");
                } else if (dataDirection === "left" && dataSpeed === "slow") {
                    scrollerInner.classList.add("animate-scroll-slow-left");
                } else if (dataDirection === "left" && dataSpeed === "fast") {
                    scrollerInner.classList.add("animate-scroll-fast-left");
                }
            }

            // For each item in the array, clone it
            // add aria-hidden to it
            // add it into the `.scroller-inner`
            scrollerContent.forEach((item) => {
                const duplicatedItem = item.cloneNode(true);
                duplicatedItem.setAttribute("aria-hidden", true);
                scrollerInner.appendChild(duplicatedItem);
            });
        });
    }
</script>
